<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SixLabors.Shapes.Text</name>
    </assembly>
    <members>
        <member name="T:SixLabors.Shapes.Text.BaseGlyphBuilder">
            <summary>
            rendering surface that Fonts can use to generate Shapes.
            </summary>
        </member>
        <member name="F:SixLabors.Shapes.Text.BaseGlyphBuilder.builder">
            <summary>
            The builder. TODO: Should this be a property?
            </summary>
        </member>
        <member name="M:SixLabors.Shapes.Text.BaseGlyphBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Shapes.Text.BaseGlyphBuilder"/> class.
            </summary>
        </member>
        <member name="P:SixLabors.Shapes.Text.BaseGlyphBuilder.Paths">
            <summary>
            Gets the paths that have been rendered by this.
            </summary>
        </member>
        <member name="M:SixLabors.Shapes.Text.BaseGlyphBuilder.SixLabors#Fonts#IGlyphRenderer#EndText">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Shapes.Text.BaseGlyphBuilder.SixLabors#Fonts#IGlyphRenderer#BeginText(SixLabors.Primitives.RectangleF)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Shapes.Text.BaseGlyphBuilder.SixLabors#Fonts#IGlyphRenderer#BeginGlyph(SixLabors.Primitives.RectangleF,SixLabors.Fonts.GlyphRendererParameters)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Shapes.Text.BaseGlyphBuilder.SixLabors#Fonts#IGlyphRenderer#BeginFigure">
            <summary>
            Begins the figure.
            </summary>
        </member>
        <member name="M:SixLabors.Shapes.Text.BaseGlyphBuilder.SixLabors#Fonts#IGlyphRenderer#CubicBezierTo(SixLabors.Primitives.PointF,SixLabors.Primitives.PointF,SixLabors.Primitives.PointF)">
            <summary>
            Draws a cubic bezier from the current point  to the <paramref name="point"/>
            </summary>
            <param name="secondControlPoint">The second control point.</param>
            <param name="thirdControlPoint">The third control point.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:SixLabors.Shapes.Text.BaseGlyphBuilder.SixLabors#Fonts#IGlyphRenderer#EndGlyph">
            <summary>
            Ends the glyph.
            </summary>
        </member>
        <member name="M:SixLabors.Shapes.Text.BaseGlyphBuilder.SixLabors#Fonts#IGlyphRenderer#EndFigure">
            <summary>
            Ends the figure.
            </summary>
        </member>
        <member name="M:SixLabors.Shapes.Text.BaseGlyphBuilder.SixLabors#Fonts#IGlyphRenderer#LineTo(SixLabors.Primitives.PointF)">
            <summary>
            Draws a line from the current point  to the <paramref name="point"/>.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:SixLabors.Shapes.Text.BaseGlyphBuilder.SixLabors#Fonts#IGlyphRenderer#MoveTo(SixLabors.Primitives.PointF)">
            <summary>
            Moves to current point to the supplied vector.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:SixLabors.Shapes.Text.BaseGlyphBuilder.SixLabors#Fonts#IGlyphRenderer#QuadraticBezierTo(SixLabors.Primitives.PointF,SixLabors.Primitives.PointF)">
            <summary>
            Draws a quadratics bezier from the current point  to the <paramref name="point"/>
            </summary>
            <param name="secondControlPoint">The second control point.</param>
            <param name="point">The point.</param>
        </member>
        <member name="M:SixLabors.Shapes.Text.BaseGlyphBuilder.BeginText(SixLabors.Primitives.RectangleF)">
            <summary>Called before any glyphs have been rendered.</summary>
            <param name="rect">The bounds the text will be rendered at and at whats size.</param>
        </member>
        <member name="M:SixLabors.Shapes.Text.BaseGlyphBuilder.BeginGlyph(SixLabors.Primitives.RectangleF)">
            <summary>Begins the glyph.</summary>
            <param name="rect">The bounds the glyph will be rendered at and at what size.</param>
        </member>
        <member name="T:SixLabors.Shapes.Text.GlyphBuilder">
            <summary>
            rendering surface that Fonts can use to generate Shapes.
            </summary>
        </member>
        <member name="M:SixLabors.Shapes.Text.GlyphBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Shapes.Text.GlyphBuilder"/> class.
            </summary>
        </member>
        <member name="M:SixLabors.Shapes.Text.GlyphBuilder.#ctor(System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Shapes.Text.GlyphBuilder"/> class.
            </summary>
            <param name="origin">The origin.</param>
        </member>
        <member name="T:SixLabors.Shapes.Text.PathGlyphBuilder">
            <summary>
            rendering surface that Fonts can use to generate Shapes by following a path
            </summary>
        </member>
        <member name="M:SixLabors.Shapes.Text.PathGlyphBuilder.#ctor(SixLabors.Shapes.IPath)">
            <summary>
            Initializes a new instance of the <see cref="T:SixLabors.Shapes.Text.PathGlyphBuilder"/> class.
            </summary>
            <param name="path">The path to render the glyps along.</param>
        </member>
        <member name="M:SixLabors.Shapes.Text.PathGlyphBuilder.BeginText(SixLabors.Primitives.RectangleF)">
            <inheritdoc/>
        </member>
        <member name="M:SixLabors.Shapes.Text.PathGlyphBuilder.BeginGlyph(SixLabors.Primitives.RectangleF)">
            <inheritdoc/>
        </member>
        <member name="T:SixLabors.Shapes.TextBuilder">
            <summary>
            Text drawing extensions for a PathBuilder
            </summary>
        </member>
        <member name="M:SixLabors.Shapes.TextBuilder.GenerateGlyphs(System.String,SixLabors.Primitives.PointF,SixLabors.Fonts.RendererOptions)">
            <summary>
            Generates the shapes corresponding the glyphs described by the font and with the settings withing the FontSpan
            </summary>
            <param name="text">The text to generate glyphs for</param>
            <param name="location">The location</param>
            <param name="style">The style and settings to use while rendering the glyphs</param>
            <returns>The <see cref="T:SixLabors.Shapes.IPathCollection"/></returns>
        </member>
        <member name="M:SixLabors.Shapes.TextBuilder.GenerateGlyphs(System.String,SixLabors.Fonts.RendererOptions)">
            <summary>
            Generates the shapes corresponding the glyphs described by the font and with the settings withing the FontSpan
            </summary>
            <param name="text">The text to generate glyphs for</param>
            <param name="style">The style and settings to use while rendering the glyphs</param>
            <returns>The <see cref="T:SixLabors.Shapes.IPathCollection"/></returns>
        </member>
        <member name="M:SixLabors.Shapes.TextBuilder.GenerateGlyphs(System.String,SixLabors.Shapes.IPath,SixLabors.Fonts.RendererOptions)">
            <summary>
            Generates the shapes corresponding the glyphs described by the font and with the setting in within the FontSpan along the described path.
            </summary>
            <param name="text">The text to generate glyphs for</param>
            <param name="path">The path to draw the text in relation to</param>
            <param name="style">The style and settings to use while rendering the glyphs</param>
            <returns>The <see cref="T:SixLabors.Shapes.IPathCollection"/></returns>
        </member>
        <member name="T:SixLabors.DebugGuard">
            <summary>
            Provides methods to protect against invalid parameters for a DEBUG build.
            </summary>
        </member>
        <member name="M:SixLabors.DebugGuard.NotNull``1(``0,System.String)">
            <summary>
            Ensures that the value is not null.
            </summary>
            <param name="value">The target object, which cannot be null.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:SixLabors.DebugGuard.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Ensures that the target value is not null, empty, or whitespace.
            </summary>
            <param name="value">The target string, which should be checked against being null or empty.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is empty or contains only blanks.</exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeLessThan``1(``0,``0,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeLessThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeGreaterThan``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeGreaterThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeBetweenOrEqualTo``1(``0,``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
            Verifies, that the method parameter with specified target value is true
            and throws an exception if it is found to be so.
            </summary>
            <param name="target">The target value, which cannot be false.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <param name="message">The error message, if any to add to the exception.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="target"/> is false.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.IsFalse(System.Boolean,System.String,System.String)">
            <summary>
            Verifies, that the method parameter with specified target value is false
            and throws an exception if it is found to be so.
            </summary>
            <param name="target">The target value, which cannot be true.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <param name="message">The error message, if any to add to the exception.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="target"/> is true.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeSizedAtLeast``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Verifies, that the `source` span has the length of 'minLength', or longer.
            </summary>
            <typeparam name="T">The element type of the spans.</typeparam>
            <param name="source">The source span.</param>
            <param name="minLength">The minimum length.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="source"/> has less than <paramref name="minLength"/> items.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.MustBeSizedAtLeast``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Verifies, that the `source` span has the length of 'minLength', or longer.
            </summary>
            <typeparam name="T">The element type of the spans.</typeparam>
            <param name="source">The target span.</param>
            <param name="minLength">The minimum length.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="source"/> has less than <paramref name="minLength"/> items.
            </exception>
        </member>
        <member name="M:SixLabors.DebugGuard.DestinationShouldNotBeTooShort``2(System.ReadOnlySpan{``0},System.Span{``1},System.String)">
            <summary>
            Verifies that the 'destination' span is not shorter than 'source'.
            </summary>
            <typeparam name="TSource">The source element type.</typeparam>
            <typeparam name="TDest">The destination element type.</typeparam>
            <param name="source">The source span.</param>
            <param name="destination">The destination span.</param>
            <param name="destinationParamName">The name of the argument for 'destination'.</param>
        </member>
        <member name="M:SixLabors.DebugGuard.DestinationShouldNotBeTooShort``2(System.Span{``0},System.Span{``1},System.String)">
            <summary>
            Verifies that the 'destination' span is not shorter than 'source'.
            </summary>
            <typeparam name="TSource">The source element type.</typeparam>
            <typeparam name="TDest">The destination element type.</typeparam>
            <param name="source">The source span.</param>
            <param name="destination">The destination span.</param>
            <param name="destinationParamName">The name of the argument for 'destination'.</param>
        </member>
        <member name="T:SixLabors.Guard">
            <summary>
            Provides methods to protect against invalid parameters.
            </summary>
        </member>
        <member name="M:SixLabors.Guard.NotNull``1(``0,System.String)">
            <summary>
            Ensures that the value is not null.
            </summary>
            <param name="value">The target object, which cannot be null.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:SixLabors.Guard.NotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Ensures that the target value is not null, empty, or whitespace.
            </summary>
            <param name="value">The target string, which should be checked against being null or empty.</param>
            <param name="parameterName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is empty or contains only blanks.</exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThan``1(``0,``0,System.String)">
            <summary>
            Ensures that the specified value is less than a maximum value.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeLessThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is less than or equal to a maximum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThan``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeGreaterThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value
            and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeBetweenOrEqualTo``1(``0,``0,``0,System.String)">
            <summary>
            Verifies that the specified value is greater than or equal to a minimum value and less than
            or equal to a maximum value and throws an exception if it is not.
            </summary>
            <param name="value">The target value, which should be validated.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <typeparam name="TValue">The type of the value.</typeparam>
            <exception cref="T:System.ArgumentException">
            <paramref name="value"/> is less than the minimum value of greater than the maximum value.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
            Verifies, that the method parameter with specified target value is true
            and throws an exception if it is found to be so.
            </summary>
            <param name="target">The target value, which cannot be false.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <param name="message">The error message, if any to add to the exception.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="target"/> is false.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.IsFalse(System.Boolean,System.String,System.String)">
            <summary>
            Verifies, that the method parameter with specified target value is false
            and throws an exception if it is found to be so.
            </summary>
            <param name="target">The target value, which cannot be true.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <param name="message">The error message, if any to add to the exception.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="target"/> is true.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeSizedAtLeast``1(System.ReadOnlySpan{``0},System.Int32,System.String)">
            <summary>
            Verifies, that the `source` span has the length of 'minLength', or longer.
            </summary>
            <typeparam name="T">The element type of the spans.</typeparam>
            <param name="source">The source span.</param>
            <param name="minLength">The minimum length.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="source"/> has less than <paramref name="minLength"/> items.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.MustBeSizedAtLeast``1(System.Span{``0},System.Int32,System.String)">
            <summary>
            Verifies, that the `source` span has the length of 'minLength', or longer.
            </summary>
            <typeparam name="T">The element type of the spans.</typeparam>
            <param name="source">The target span.</param>
            <param name="minLength">The minimum length.</param>
            <param name="parameterName">The name of the parameter that is to be checked.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="source"/> has less than <paramref name="minLength"/> items.
            </exception>
        </member>
        <member name="M:SixLabors.Guard.DestinationShouldNotBeTooShort``2(System.ReadOnlySpan{``0},System.Span{``1},System.String)">
            <summary>
            Verifies that the 'destination' span is not shorter than 'source'.
            </summary>
            <typeparam name="TSource">The source element type.</typeparam>
            <typeparam name="TDest">The destination element type.</typeparam>
            <param name="source">The source span.</param>
            <param name="destination">The destination span.</param>
            <param name="destinationParamName">The name of the argument for 'destination'.</param>
        </member>
        <member name="M:SixLabors.Guard.DestinationShouldNotBeTooShort``2(System.Span{``0},System.Span{``1},System.String)">
            <summary>
            Verifies that the 'destination' span is not shorter than 'source'.
            </summary>
            <typeparam name="TSource">The source element type.</typeparam>
            <typeparam name="TDest">The destination element type.</typeparam>
            <param name="source">The source span.</param>
            <param name="destination">The destination span.</param>
            <param name="destinationParamName">The name of the argument for 'destination'.</param>
        </member>
        <member name="T:System.MathF">
            <summary>
            Provides single-precision floating point constants and static methods for trigonometric, logarithmic, and other common mathematical functions.
            </summary>
            <remarks>MathF emulation on platforms that don't support it natively.</remarks>
        </member>
        <member name="F:System.MathF.PI">
            <summary>
            Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.
            </summary>
        </member>
        <member name="M:System.MathF.Abs(System.Single)">
            <summary>
            Returns the absolute value of a single-precision floating-point number.
            </summary>
            <param name="f">
            A number that is greater than or equal to <see cref="F:System.Single.MinValue" />, but less than or equal to <see cref="F:System.Single.MaxValue" />.
            </param>
            <returns>
            A single-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Single.MaxValue" />.
            </returns>
        </member>
        <member name="M:System.MathF.Atan2(System.Single,System.Single)">
            <summary>
            Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y">The y coordinate of a point.</param>
            <param name="x">The x coordinate of a point.</param>
            <returns>
            An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = y / x, where
            (x, y) is a point in the Cartesian plane. Observe the following: For (x, y) in
            quadrant 1, 0 &lt; θ &lt; π/2.For (x, y) in quadrant 2, π/2 &lt; θ≤π.For (x, y) in quadrant
            3, -π &lt; θ &lt; -π/2.For (x, y) in quadrant 4, -π/2 &lt; θ &lt; 0.For points on the boundaries
            of the quadrants, the return value is the following:If y is 0 and x is not negative,
            θ = 0.If y is 0 and x is negative, θ = π.If y is positive and x is 0, θ = π/2.If
            y is negative and x is 0, θ = -π/2.If y is 0 and x is 0, θ = 0. If x or y is
            <see cref="F:System.Single.NaN"/>, or if x and y are either <see cref="F:System.Single.PositiveInfinity"/> or
            <see cref="F:System.Single.NegativeInfinity"/>, the method returns <see cref="F:System.Single.NaN"/>.
            </returns>
        </member>
        <member name="M:System.MathF.Ceiling(System.Single)">
            <summary>
            Returns the smallest integral value that is greater than or equal to the specified single-precision floating-point number.
            </summary>
            <param name="f">A single-precision floating-point number.</param>
            <returns>
            The smallest integral value that is greater than or equal to <paramref name="f" />.
            If <paramref name="f" /> is equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" />,
            or <see cref="F:System.Single.PositiveInfinity" />, that value is returned.
            Note that this method returns a <see cref="T:System.Single" /> instead of an integral type.
            </returns>
        </member>
        <member name="M:System.MathF.Cos(System.Single)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="f">An angle, measured in radians.</param>
            <returns>
            The cosine of <paramref name="f"/>. If <paramref name="f"/> is equal to <see cref="F:System.Float.NaN"/>, <see cref="F:System.Float.NegativeInfinity"/>,
            or <see cref="F:System.Float.PositiveInfinity"/>, this method returns <see cref="F:System.Float.NaN"/>.
            </returns>
        </member>
        <member name="M:System.MathF.Exp(System.Single)">
            <summary>
            Returns e raised to the specified power.
            </summary>
            <param name="f">A number specifying a power.</param>
            <returns>
            The number e raised to the power <paramref name="f" />.
            If <paramref name="f" /> equals <see cref="F:System.Single.NaN" /> or <see cref="F:System.Single.PositiveInfinity" />, that value is returned.
            If <paramref name="f" /> equals <see cref="F:System.Single.NegativeInfinity" />, 0 is returned.
            </returns>
        </member>
        <member name="M:System.MathF.Floor(System.Single)">
            <summary>
            Returns the largest integer less than or equal to the specified single-precision floating-point number.
            </summary>
            <param name="f">A single-precision floating-point number. </param>
            <returns>
            The largest integer less than or equal to <paramref name="f" />.
            If <paramref name="f" /> is equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" />,
            or <see cref="F:System.Single.PositiveInfinity" />, that value is returned.
            </returns>
        </member>
        <member name="M:System.MathF.Max(System.Single,System.Single)">
            <summary>
            Returns the larger of two single-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two single-precision floating-point numbers to compare. </param>
            <param name="val2">The second of two single-precision floating-point numbers to compare. </param>
            <returns>
            Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.
            If <paramref name="val1" />, or <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are
            equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.
            </returns>
        </member>
        <member name="M:System.MathF.Min(System.Single,System.Single)">
            <summary>
            Returns the smaller of two single-precision floating-point numbers.
            </summary>
            <param name="val1">The first of two single-precision floating-point numbers to compare. </param>
            <param name="val2">The second of two single-precision floating-point numbers to compare. </param>
            <returns>
            Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.
            If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal
            to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.
            </returns>
        </member>
        <member name="M:System.MathF.Pow(System.Single,System.Single)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="x">A single-precision floating-point number to be raised to a power. </param>
            <param name="y">A single-precision floating-point number that specifies a power. </param>
            <returns>The number <paramref name="x" /> raised to the power <paramref name="y" />.</returns>
        </member>
        <member name="M:System.MathF.Round(System.Single)">
            <summary>
            Rounds a single-precision floating-point value to the nearest integral value.
            </summary>
            <param name="f">A single-precision floating-point number to be rounded.</param>
            <returns>
            The integer nearest <paramref name="f" />.
            If the fractional component of <paramref name="f" /> is halfway between two integers, one of which is even and the other odd, then the even number is returned.
            Note that this method returns a <see cref="T:System.Single" /> instead of an integral type.
            </returns>
        </member>
        <member name="M:System.MathF.Round(System.Single,System.MidpointRounding)">
            <summary>
            Rounds a single-precision floating-point value to the nearest integer.
            A parameter specifies how to round the value if it is midway between two numbers.
            </summary>
            <param name="f">A single-precision floating-point number to be rounded. </param>
            <param name="mode">Specification for how to round <paramref name="f" /> if it is midway between two other numbers.</param>
            <returns>
            The integer nearest <paramref name="f" />. If <paramref name="f" /> is halfway between two integers, one of which is even
            and the other odd, then <paramref name="mode" /> determines which of the two is returned.
            Note that this method returns a <see cref="T:System.Single" /> instead of an integral type.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</exception>
        </member>
        <member name="M:System.MathF.Sin(System.Single)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="f">An angle, measured in radians.</param>
            <returns>
            The sine of <paramref name="f" />.
            If <paramref name="f" /> is equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" />,
            or <see cref="F:System.Single.PositiveInfinity" />, this method returns <see cref="F:System.Single.NaN" />.
            </returns>
        </member>
        <member name="M:System.MathF.Sqrt(System.Single)">
            <summary>
            Returns the square root of a specified number.
            </summary>
            <param name="f">The number whose square root is to be found.</param>
            <returns>
            One of the values in the following table.
            <paramref name="f" /> parameter Return value Zero or positive The positive square root of <paramref name="f" />.
            Negative <see cref="F:System.Single.NaN" />Equals <see cref="F:System.Single.NaN" />
            <see cref="F:System.Single.NaN" />Equals <see cref="F:System.Single.PositiveInfinity" />
            <see cref="F:System.Single.PositiveInfinity" />.
            </returns>
        </member>
    </members>
</doc>
